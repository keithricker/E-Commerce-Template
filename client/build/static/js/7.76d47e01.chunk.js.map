{"version":3,"sources":["components/checkout-item/checkout-item.component.jsx","components/ui/stripe-button/stripe-button.component.jsx","pages/checkout/checkout.component.jsx"],"names":["CheckoutItem","_ref","cartItem","clearItem","cartActions","addItem","reduceItemQuantity","dispatch","useDispatch","removeItemFromDom","ev","parent","target","parentNode","Object","assign","style","transition","height","opacity","padding","window","setTimeout","name","imageUrl","price","quantity","_jsxs","className","children","_jsx","src","alt","onClick","withCms","props","branding","cms","priceForStripe","StripeCheckout","label","titleText","billingAddress","shippingAddress","image","description","concat","amount","panelLabel","token","axios","url","method","data","then","response","alert","catch","error","stripeKey","CheckoutPage","cartItems","useSelector","state","cart","total","arguments","length","undefined","reduce","prev","curr","getTotal","map","item","id","StripeCheckoutButton"],"mappings":"8LAyCeA,EApCM,SAAHC,GAAoB,IAAfC,EAAQD,EAARC,SACXC,EAA2CC,IAA3CD,UAAWE,EAAgCD,IAAhCC,QAASC,EAAuBF,IAAvBE,mBACtBC,EAAWC,cAIXC,EAAoB,SAACC,GACvB,IAAMC,EAASD,EAAGE,OAAOC,WACzBC,OAAOC,OAAOJ,EAAOK,MAAM,CACvBC,WAAY,WACZ,aAAc,MACdC,OAAQ,MACRC,QAAS,IACTC,QAAS,QAEbC,OAAOC,YAAW,WAZFf,EAASJ,EAAUD,GAcnC,GAAE,IACN,EACQqB,EAAoCrB,EAApCqB,KAAMC,EAA8BtB,EAA9BsB,SAAUC,EAAoBvB,EAApBuB,MAAOC,EAAaxB,EAAbwB,SAC/B,OACAC,eAAA,OAAKC,UAAU,gBAAeC,SAAA,CAC1BC,cAAA,OAAKF,UAAU,kCAAiCC,SAC5CC,cAAA,OAAKC,IAAKP,EAAUQ,IAAI,WAE5BF,cAAA,QAAMF,UAAU,uBAAsBC,SAAEN,IACxCI,eAAA,QAAMC,UAAU,2BAA0BC,SAAA,CACtCC,cAAA,QAAMF,UAAU,QAAQK,QAAS,kBAvBlB1B,EAASD,EAAmBJ,GAuBM,EAAC2B,SAAC,WAC/CC,cAAA,QAAMF,UAAU,QAAOC,SAAEH,IAC7BI,cAAA,QAAMF,UAAU,QAAQK,QAAS,kBAxBvB1B,EAASF,EAAQH,GAwBiB,EAAC2B,SAAC,cAElDF,eAAA,QAAMC,UAAU,wBAAuBC,SAAA,CAAC,IAAEJ,KAC1CK,cAAA,OAAKF,UAAU,gCAAgCK,QAAS,SAACvB,GAAE,OAAKD,EAAkBC,EAAG,EAACmB,SAAC,aAG/F,E,4CCGeK,eAtCc,SAACC,GAC5B,IAAQV,EAAcU,EAAdV,MACFW,EAAW,CAAEC,IADGF,EAARE,KAERC,EAAyB,IAARb,EAoBvB,OACEK,cAACS,IAAc,CACbC,MAAM,UACNjB,KAAMa,EAASK,UACfC,gBAAc,EACdC,iBAAe,EACfC,MAAM,iCACNC,YAAW,kBAAAC,OAAoBrB,GAC/BsB,OAAQT,EACRU,WAAW,UACXC,MA3BY,SAAAA,GACZC,IAAM,CACJC,IAAK,UACLC,OAAQ,OACRC,KAAM,CACJN,OAAQT,EACRW,WAGHK,MAAK,SAAAC,GACJC,MAAM,qBACR,IACCC,OAAM,SAAAC,GACLF,MAAM,iGACR,GACJ,EAaIG,UA9BmB,8CAiCzB,I,OCbeC,UAtBM,WACnB,IACMC,EAAYC,aAAY,SAAAC,GAAK,OAAIA,EAAMC,KAAKH,SAAS,KAAK,GAC1DI,EAFW,WAAS,OAAHC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAC,IAAaG,QAAO,SAACC,EAAKC,GAAI,OAAMA,EAAK9C,MAAQ8C,EAAK7C,SAAW4C,CAAI,GAAE,EAAE,CAEnFE,CAASX,GACvB,OAAKI,EAEHtC,eAAA,OAAKC,UAAU,gBAAeC,SAAA,CAExBgC,EAAUY,KAAI,SAAAC,GAAI,OAAI5C,cAAC9B,EAAY,CAAeE,SAAUwE,GAAnBA,EAAKC,GAAsB,IAEtEhD,eAAA,OAAKC,UAAU,QAAOC,SAAA,CACpBC,cAAA,QAAMF,UAAU,aAAYC,SAAC,eAAmBF,eAAA,QAAMC,UAAU,eAAcC,SAAA,CAAC,IAAEoC,QAEnFtC,eAAA,OAAKC,UAAU,eAAcC,SAAA,CAAC,kEAE5BC,cAAA,SAAM,iDAGRA,cAAC8C,EAAoB,CAACnD,MAAOwC,OAddnC,cAAA,MAAAD,SAAI,mBAiB3B,C","file":"static/js/7.76d47e01.chunk.js","sourcesContent":["import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport './checkout-item.styles.scss';\nimport { cartActions } from '../../store/redux/cart/cart-slice'\n\nconst CheckoutItem = ({cartItem}) => {\n    const { clearItem, addItem, reduceItemQuantity } = cartActions\n    const dispatch = useDispatch()\n    const clear = () => dispatch(clearItem(cartItem))\n    const subtract = () => dispatch(reduceItemQuantity(cartItem))\n    const add = () => dispatch(addItem(cartItem))\n    const removeItemFromDom = (ev) => {\n        const parent = ev.target.parentNode\n        Object.assign(parent.style,{\n            transition: \"all 0.5s\",\n            'min-height': \"0px\",\n            height: \"0px\",\n            opacity: \"0\",\n            padding: \"0px\"\n        })\n        window.setTimeout(() => {\n            clear()\n        },500)\n    }\n    const { name, imageUrl, price, quantity } = cartItem\n    return (\n    <div className='checkout-item'>\n        <div className='checkout-column image-container'>\n            <img src={imageUrl} alt=\"item\" />\n        </div>\n        <span className=\"checkout-column name\">{name}</span>\n        <span className=\"checkout-column quantity\">\n            <span className=\"arrow\" onClick={() => subtract()}>&#10094;</span>\n                <span className=\"value\">{quantity}</span>\n            <span className=\"arrow\" onClick={() => add()}>&#10095;</span>\n        </span>\n        <span className=\"checkout-column price\">${price}</span>\n        <div className=\"checkout-column remove-button\" onClick={(ev) => removeItemFromDom(ev)}>&#10005;</div>\n    </div>\n    )\n}\nexport default CheckoutItem","import React from 'react';\nimport StripeCheckout from 'react-stripe-checkout';\nimport axios from 'axios';\nimport { withCms } from '../../../cms';\n\nconst StripeCheckoutButton = (props) => {\n  const { price,cms } = props\n  const branding = { cms }\n  const priceForStripe = price * 100;\n  const publishableKey = 'pk_test_xYtLS9QFqAO646nlSGWbkVK600VgjaWS2v';\n\n  const onToken = token => {\n      axios({\n        url: 'payment',\n        method: 'post',\n        data: {\n          amount: priceForStripe,\n          token\n        }\n      })\n      .then(response => {\n        alert('Payment Successful')\n      })\n      .catch(error => {\n        alert('There was an error with your transaction. Please be sure to use the provided test credit card.')\n      });\n  }\n\n  return (\n    <StripeCheckout\n      label=\"Pay Now\"\n      name={branding.titleText}\n      billingAddress\n      shippingAddress\n      image='https://svgshare.com/i/CUz.svg'\n      description={`Your total is $${price}`}\n      amount={priceForStripe}\n      panelLabel='Pay Now'\n      token={onToken}\n      stripeKey={publishableKey}\n    />\n  );\n};\nexport default withCms(StripeCheckoutButton);","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport CheckoutItem from '../../components/checkout-item/checkout-item.component';\nimport StripeCheckoutButton from '../../components/ui/stripe-button/stripe-button.component'\n\nimport './checkout.styles.scss';\n\nconst CheckoutPage = () => {\n  const getTotal = (items=[]) => items.reduce((prev,curr) => (curr.price * curr.quantity + prev),0)\n  const cartItems = useSelector(state => state.cart.cartItems) || []\n  const total = getTotal(cartItems)\n  if (!total) return ( <h1>We got no total</h1> )\n  return (\n    <div className=\"checkout-page\">\n        {\n          cartItems.map(item => <CheckoutItem key={item.id} cartItem={item} />)\n        }\n        <div className=\"total\">\n          <span className=\"total-text\">TOTAL:&nbsp;</span><span className=\"total-amount\">${total}</span>\n        </div>\n        <div className='test-warning'>\n          *Please use the following test credit card for (mock) payments*\n          <br />\n          4242 4242 4242 4242 - Exp: 01/20 - CVV: 123\n        </div>\n        <StripeCheckoutButton price={total} />\n    </div>\n  )\n}\nexport default CheckoutPage"],"sourceRoot":""}