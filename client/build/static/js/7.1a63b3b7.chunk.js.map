{"version":3,"sources":["redux/shop/shop.selectors.js","components/collection-item/collection-item.component.jsx","components/collection-preview/collection-preview.component.jsx","components/collections-overview/collections-overview.component.jsx","pages/collection/collection.component.jsx","components/with-spinner/with-spinner.component.jsx","pages/shop/shop.component.jsx","components/custom-button/custom-button.component.jsx"],"names":["selectShop","state","shop","selectCollections","createSelector","collections","selectCollectionsForPreview","Object","keys","map","key","selectCollection","collectionUrlParam","selectIsCollectionFetching","isFetching","selectIsCollectionsLoaded","cartIcon","require","faCartPlus","connect","dispatch","addItem","item","amount","name","price","imageUrl","className","id","src","alt","loading","onClick","cartItem","element","document","querySelector","style","innerHTML","addToCart","inverted","icon","CollectionPreview","title","items","toUpperCase","ownProps","collection","routeName","count","other","slice","match","params","collectionId","console","log","WithSpinner","WrappedComponent","isLoading","otherProps","CollectionsOverviewWithSpinner","CollectionsOverview","CollectionPageWithSpinner","CollectionPage","ShopPage","fetchCollectionsStart","this","props","isCollectionFetching","isCollectionsLoaded","exact","path","render","React","Component","mapStateToProps","createStructuredSelector","CustomButton","children","isGoogleSignIn"],"mappings":"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","file":"static/js/7.1a63b3b7.chunk.js","sourcesContent":["import { createSelector } from 'reselect';\n\nconst selectShop = state => state.shop;\n\nexport const selectCollections = createSelector(\n    [selectShop],\n    shop => shop.collections\n);\n\nexport const selectCollectionsForPreview = createSelector(\n    [selectCollections],\n    collections => collections ? Object.keys(collections).map(key => collections[key]) : []\n);\n\nexport const selectCollection = collectionUrlParam => createSelector(\n    [selectCollections],\n    collections => (collections ? collections[collectionUrlParam] : null)\n);\n\nexport const selectIsCollectionFetching = createSelector(\n    [selectShop],\n    shop => shop.isFetching\n);\n\nexport const selectIsCollectionsLoaded = createSelector(\n    [selectShop],\n    shop => !!shop.collections\n);","import React from 'react';\nimport { connect } from 'react-redux';\nimport { addItem } from '../../redux/cart/cart.actions';\nimport CustomButton from '../custom-button/custom-button.component';\nimport './collection-item.styles.scss';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nconst cartIcon = require('@fortawesome/free-solid-svg-icons').faCartPlus\n\nconst CollectionItem = ({ item, addItem }) => {\n    let amount = 0\n    const addToCart = (cartItem) => { \n        const element = document.querySelector(`[data-id=\"${item.id}\"] .custom-button .button-text`)\n        amount++\n        element.style['font-size'] = '70%'\n        element.innerHTML = `ADD TO CART  &nbsp;<span style=\"text-transform:lowercase\">amount: ${amount}</span>`\n        addItem(cartItem) \n    }\n    const { name, price, imageUrl } = item;\n    return (\n        <div className=\"collection-item\" data-id={item.id}>\n            <div className=\"imageWrapper\">\n            <img className=\"image\" src={imageUrl} alt={name} loading=\"lazy\" />\n            </div>\n            <div className=\"collection-footer\">\n                <span className=\"name\">{name}</span>\n                <span className=\"price\">${price}</span>\n            </div>\n            <CustomButton onClick={() => addToCart(item)} inverted>\n                <span><FontAwesomeIcon icon={cartIcon} /></span>\n                <span className=\"button-text\">ADD TO CART</span>\n            </CustomButton>\n        </div>\n    )\n}\nconst mapDispatchToProps = dispatch => ({\n    addItem: item => dispatch(addItem(item))\n})\nexport default connect(null,mapDispatchToProps)(CollectionItem);","import React from 'react';\nimport './collection-preview.styles.scss';\nimport CollectionItem from '../collection-item/collection-item.component';\n\nconst CollectionPreview = ({ title, items }) => (\n    <div className='collection-preview'>\n        <h1 className='title'>{title.toUpperCase()}</h1>\n        <div className=\"preview\">\n            {items.map((item) => (\n                <CollectionItem key={item.id} item={item} />\n            ))}\n        </div>\n    </div>\n) \nexport default CollectionPreview;","import React from 'react';\nimport { connect } from 'react-redux';\nimport CollectionPreview from '../collection-preview/collection-preview.component';\nimport { selectCollection } from '../../redux/shop/shop.selectors'\nimport { selectCollectionsForPreview } from '../../redux/shop/shop.selectors';\n\nconst CollectionsOverview = ({ collections }) => { \n    let count = collections.count\n    return (\n    <div className='collections-overview'>\n        {\n            collections.map(({ id,...other }) => {\n              other.items = other.items.slice(0,4)\n              other.count = count\n              return <CollectionPreview key={id} {...other} />\n            })\n        }\n    </div> \n    )\n};\nconst mapStateToProps = (state,ownProps) => {\n    return {\n      collections: !ownProps.collection ? selectCollectionsForPreview(state) : [selectCollection(ownProps.collection.routeName)(state)]\n    }\n};\nexport default connect(mapStateToProps)(CollectionsOverview);","import React, { useState } from 'react';\nimport { connect } from 'react-redux';\nimport { selectCollection } from '../../redux/shop/shop.selectors'\nimport CollectionsOverview from '../../components/collections-overview/collections-overview.component';\n\nconst CollectionPage = ({ collection, match }) => {\n    console.log('collection',collection);\n    console.log('match',match)\n    return <CollectionsOverview collection={collection}></CollectionsOverview>\n};\nconst mapStateToProps = (state, ownProps) => ({\n    collection: selectCollection(ownProps.match.params.collectionId)(state)\n})\nexport default connect(mapStateToProps)(CollectionPage);","import React from 'react';\nimport './with-spinner.styles.scss';\n\nconst WithSpinner = function(WrappedComponent) {\n    return function ({ isLoading, ...otherProps }) {\n        return isLoading ? (\n            <div className=\"spinner-overlay\">\n                <div className=\"spinner-container\"></div>\n            </div>\n        ) : (\n        <WrappedComponent {...otherProps} />)\n    }\n}\nexport default WithSpinner;","import React from 'react';\nimport { Route } from 'react-router-dom';\nimport { createStructuredSelector } from 'reselect';\nimport CollectionPage from '../collection/collection.component';\nimport CollectionsOverview from '../../components/collections-overview/collections-overview.component';\nimport { connect } from 'react-redux';\nimport { fetchCollectionsStart } from '../../redux/shop/shop.actions';\nimport { selectIsCollectionFetching, selectIsCollectionsLoaded }  from '../../redux/shop/shop.selectors';\nimport WithSpinner from '../../components/with-spinner/with-spinner.component';\n\nconst CollectionsOverviewWithSpinner = WithSpinner(CollectionsOverview);\nconst CollectionPageWithSpinner = WithSpinner(CollectionPage);\n\nclass ShopPage extends React.Component {\n\n    componentDidMount() {\n        const { fetchCollectionsStart } = this.props;\n        fetchCollectionsStart();\n    }\n\n    render() {\n        const { match, isCollectionFetching, isCollectionsLoaded } = this.props;\n        return (\n            <div className=\"shop-page\">\n                <Route exact path={`${match.path}`} render={(props) => <CollectionsOverviewWithSpinner isLoading={isCollectionFetching} {...props} /> } />\n                <Route path={`${match.path}/:collectionId`} render={(props) => <CollectionPageWithSpinner isLoading={!isCollectionsLoaded} {...props} />} />\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = createStructuredSelector({\n    isCollectionFetching: selectIsCollectionFetching,\n    isCollectionsLoaded: selectIsCollectionsLoaded\n});\n\nconst mapDispatchToProps = dispatch => ({\n    fetchCollectionsStart: () => dispatch(fetchCollectionsStart())\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ShopPage);","import React from 'react';\nimport './custom-button.styles.scss';\n\nconst CustomButton = ({ children, isGoogleSignIn, inverted, className, ...otherProps }) => {\nreturn (\n    <button className={`${inverted ? 'inverted' : ''} ${className ? className : ''} custom-button`} { ...otherProps }>\n        {children}\n    </button>\n    )\n}\nexport default CustomButton;"],"sourceRoot":""}