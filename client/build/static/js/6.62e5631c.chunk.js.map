{"version":3,"sources":["components/checkout-item/checkout-item.component.jsx","components/stripe-button/stripe-button.component.jsx","pages/checkout/checkout.component.jsx"],"names":["connect","dispatch","clearItem","item","clearItemFromCart","reduceItemQuantity","addItem","cartItem","name","imageUrl","price","quantity","className","src","alt","onClick","ev","parent","target","parentNode","Object","assign","style","transition","height","opacity","padding","window","setTimeout","removeItemFromDom","StripeCheckoutButton","priceForStripe","label","billingAddress","shippingAddress","image","description","amount","panelLabel","token","console","log","axios","url","method","data","then","response","alert","catch","error","JSON","parse","stripeKey","state","cartItems","selectCartItems","total","selectCartItemsTotal","map","id","class"],"mappings":"8MAyCeA,cAAQ,MALI,SAAAC,GAAQ,MAAK,CACpCC,UAAW,SAAAC,GAAI,OAAIF,EAASG,YAAkBD,KAC9CE,mBAAoB,SAAAF,GAAI,OAAIF,EAASI,YAAmBF,KACxDG,QAAS,SAAAH,GAAI,OAAIF,EAASK,YAAQH,QAEvBH,EApCM,SAAC,GAA0D,IAAxDO,EAAuD,EAAvDA,SAAUL,EAA6C,EAA7CA,UAAWI,EAAkC,EAAlCA,QAASD,EAAyB,EAAzBA,mBAc1CG,EAAoCD,EAApCC,KAAMC,EAA8BF,EAA9BE,SAAUC,EAAoBH,EAApBG,MAAOC,EAAaJ,EAAbI,SAC/B,OACA,sBAAKC,UAAU,gBAAf,UACI,qBAAKA,UAAU,kCAAf,SACI,qBAAKC,IAAKJ,EAAUK,IAAI,WAE5B,sBAAMF,UAAU,uBAAhB,SAAwCJ,IACxC,uBAAMI,UAAU,2BAAhB,UACI,sBAAMA,UAAU,QAAQG,QAAS,kBAAMV,EAAmBE,IAA1D,oBACI,sBAAMK,UAAU,QAAhB,SAAyBD,IAC7B,sBAAMC,UAAU,QAAQG,QAAS,SAACC,GAAD,OAAQV,EAAQC,IAAjD,uBAEJ,uBAAMK,UAAU,wBAAhB,cAA0CF,KAC1C,qBAAKE,UAAU,gCAAgCG,QAAS,SAACC,GAAD,OA1BlC,SAACA,EAAGb,GAC1B,IAAMc,EAASD,EAAGE,OAAOC,WACzBC,OAAOC,OAAOJ,EAAOK,MAAM,CACvBC,WAAY,WACZ,aAAc,MACdC,OAAQ,MACRC,QAAS,IACTC,QAAS,QAEbC,OAAOC,YAAW,WACd1B,EAAUC,KACZ,KAe8D0B,CAAkBb,EAAGT,IAArF,0B,oCCUOuB,EAtCc,SAAC,GAAe,IAAbpB,EAAY,EAAZA,MACxBqB,EAAyB,IAARrB,EAsBvB,OACE,cAAC,IAAD,CACAsB,MAAM,UACNxB,KAAK,0BACLyB,gBAAc,EACdC,iBAAe,EACfC,MAAM,iCACNC,YAAW,yBAAoB1B,GAC/B2B,OAAQN,EACRO,WAAW,UACXC,MA7Bc,SAAAA,GACZC,QAAQC,IAAIF,GACZG,IAAM,CACJC,IAAK,UACLC,OAAQ,OACRC,KAAM,CACJR,OAAQN,EACRQ,WAGHO,MAAK,SAAAC,GACJC,MAAM,yBAEPC,OAAM,SAAAC,GACLV,QAAQC,IAAI,kBAAmBU,KAAKC,MAAMF,IAC1CF,MAAM,sGAeVK,UAhCqB,gD,OCwBVrD,uBAJS,SAAAsD,GAAK,MAAK,CAChCC,UAAYC,YAAgBF,GAC5BG,MAAQC,YAAqBJ,MAEhBtD,EApBM,SAAC,GAAD,IAAEuD,EAAF,EAAEA,UAAWE,EAAb,EAAaA,MAAb,OACnB,sBAAK7C,UAAU,gBAAf,UAEM2C,EAAUI,KAAI,SAAAxD,GAAI,OAAI,cAAC,EAAD,CAA4BI,SAAUJ,GAAnBA,EAAKyD,OAEhD,sBAAKhD,UAAU,QAAf,UACE,sBAAMiD,MAAM,aAAZ,wBAA4C,uBAAMA,MAAM,eAAZ,cAA6BJ,QAE3E,sBAAK7C,UAAU,eAAf,qEAEE,uBAFF,iDAKA,cAAC,EAAD,CAAsBF,MAAO+C","file":"static/js/6.62e5631c.chunk.js","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport './checkout-item.styles.scss';\nimport { clearItemFromCart, addItem, reduceItemQuantity } from '../../redux/cart/cart.actions'\n\nconst CheckoutItem = ({ cartItem, clearItem, addItem, reduceItemQuantity }) => {\n    const removeItemFromDom = (ev,item) => {\n        const parent = ev.target.parentNode\n        Object.assign(parent.style,{\n            transition: \"all 0.5s\",\n            'min-height': \"0px\",\n            height: \"0px\",\n            opacity: \"0\",\n            padding: \"0px\"\n        })\n        window.setTimeout(() => {\n            clearItem(item)\n        },500)\n    }\n    const { name, imageUrl, price, quantity } = cartItem\n    return (\n    <div className='checkout-item'>\n        <div className='checkout-column image-container'>\n            <img src={imageUrl} alt=\"item\" />\n        </div>\n        <span className=\"checkout-column name\">{name}</span>\n        <span className=\"checkout-column quantity\">\n            <span className=\"arrow\" onClick={() => reduceItemQuantity(cartItem)}>&#10094;</span>\n                <span className=\"value\">{quantity}</span>\n            <span className=\"arrow\" onClick={(ev) => addItem(cartItem)}>&#10095;</span>\n        </span>\n        <span className=\"checkout-column price\">${price}</span>\n        <div className=\"checkout-column remove-button\" onClick={(ev) => removeItemFromDom(ev,cartItem)}>&#10005;</div>\n    </div>\n    )\n}\nconst mapDispatchToProps = dispatch => ({\n    clearItem: item => dispatch(clearItemFromCart(item)),\n    reduceItemQuantity: item => dispatch(reduceItemQuantity(item)),\n    addItem: item => dispatch(addItem(item))\n})\nexport default connect(null, mapDispatchToProps)(CheckoutItem);","import React from 'react';\nimport StripeCheckout from 'react-stripe-checkout';\nimport axios from 'axios';\n\nconst StripeCheckoutButton = ({ price }) => {\n  const priceForStripe = price * 100;\n  const publishableKey = 'pk_test_xYtLS9QFqAO646nlSGWbkVK600VgjaWS2v';\n\n  const onToken = token => {\n      console.log(token);\n      axios({\n        url: 'payment',\n        method: 'post',\n        data: {\n          amount: priceForStripe,\n          token\n        }\n      })\n      .then(response => {\n        alert('Payment Successful')\n      })\n      .catch(error => {\n        console.log('Payment Error: ', JSON.parse(error));\n        alert('There was an error with your transaction. Please be sure to use the provided test credit card.')\n      });\n  }\n\n  return (\n    <StripeCheckout\n    label=\"Pay Now\"\n    name='Widgets Unlimited, Inc.'\n    billingAddress\n    shippingAddress\n    image='https://svgshare.com/i/CUz.svg'\n    description={`Your total is $${price}`}\n    amount={priceForStripe}\n    panelLabel='Pay Now'\n    token={onToken}\n    stripeKey={publishableKey}\n    />\n  );\n};\nexport default StripeCheckoutButton;","import React from 'react';\nimport { connect } from 'react-redux';\nimport { createStructuredSelector } from 'reselect';\nimport { selectCartItems, selectCartItemsTotal } from '../../redux/cart/cart.selectors';\nimport CheckoutItem from '../../components/checkout-item/checkout-item.component';\nimport StripeCheckoutButton from '../../components/stripe-button/stripe-button.component'\n\nimport './checkout.styles.scss';\n\n\nconst CheckoutPage = ({cartItems, total}) => (\n  <div className=\"checkout-page\">\n      {\n        cartItems.map(item => <CheckoutItem key={item.id} cartItem={item} />)\n      }\n      <div className=\"total\">\n        <span class=\"total-text\">TOTAL:&nbsp;</span><span class=\"total-amount\">${total}</span>\n      </div>\n      <div className='test-warning'>\n        *Please use the following test credit card for payments*\n        <br />\n        4242 4242 4242 4242 - Exp: 01/20 - CVV: 123\n      </div>\n      <StripeCheckoutButton price={total} />\n  </div>\n)\nconst mapStateToProps = state => ({\n  cartItems : selectCartItems(state),\n  total : selectCartItemsTotal(state)\n});\nexport default connect(mapStateToProps)(CheckoutPage);"],"sourceRoot":""}